{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dark",
				"dark_mode"
			],
			[
				"ic",
				"iconslibreoffice"
			],
			[
				"plank_",
				"plank_theme\tstatement"
			],
			[
				"fol",
				"folder_color"
			],
			[
				"fo",
				"folder_color"
			],
			[
				"item",
				"item_day_night\tstatement"
			],
			[
				"sh",
				"show_all"
			],
			[
				"appind",
				"appindicator\tmodule"
			],
			[
				"set",
				"set_active"
			],
			[
				"el",
				"elif"
			],
			[
				"windo",
				"windows_decor\tparam"
			],
			[
				"select",
				"select_theme"
			],
			[
				"chan",
				"change_theme"
			],
			[
				"plan",
				"plank_theme"
			],
			[
				"Pa",
				"Papirus"
			],
			[
				"Adapta-G",
				"Adapta-Green"
			],
			[
				"Ad",
				"Adapta-DeepPurple"
			],
			[
				"Adapta-p",
				"Adapta-Pink"
			],
			[
				"Adapta-g",
				"Adapta-Green-Nokto"
			],
			[
				"Adapta-P",
				"Adapta-Pink-Nokto"
			],
			[
				"Ada",
				"Adapta-BlueGrey-Nokto"
			],
			[
				"get",
				"getattr\tfunction"
			],
			[
				"geox_tweak_xfce",
				"geox_tweak_xfce_test\tmodule"
			],
			[
				"gtx",
				"gtx_gui\tmodule"
			],
			[
				"call",
				"check_call\tfunction"
			],
			[
				"foldec",
				"folder_color"
			],
			[
				"folder",
				"folder_c"
			],
			[
				"folder_c",
				"folder_color\tstatement"
			],
			[
				"var",
				"var_adapta\tparam"
			],
			[
				"var_a",
				"var_adapta"
			],
			[
				"theme",
				"theme_var"
			],
			[
				"them",
				"theme_var"
			],
			[
				"va",
				"var_arc"
			],
			[
				"wnd",
				"wnd_id"
			],
			[
				"install",
				"install_wnd\tstatement"
			],
			[
				"xfce",
				"xfce4-terminal"
			],
			[
				"geox_tw",
				"geox_tweak_xfce_test\tmodule"
			],
			[
				"check",
				"check_call\tfunction"
			],
			[
				"con",
				"config"
			],
			[
				"geox",
				"geox-light"
			],
			[
				"Papi",
				"Papirus-Light"
			],
			[
				"Adwaita-",
				"Adwaita-xfwm4"
			],
			[
				"conky",
				"conky-all"
			],
			[
				"Geox",
				"geox-tweak-xfce"
			],
			[
				"adw",
				"adwaita-dark"
			],
			[
				"gre",
				"greybird"
			],
			[
				"qo",
				"qogir-dark"
			],
			[
				"dock",
				"dockbarx"
			],
			[
				"xf",
				"xfdashboard"
			],
			[
				"Theme",
				"ThemeInstall"
			],
			[
				"layout_maco",
				"layout_macos_dark\tfunction"
			],
			[
				"layout_mat",
				"layout_materia_light"
			],
			[
				"layout__ma",
				"layout_materia_dark"
			],
			[
				"layout_qog",
				"layout_qogir_light\tfunction"
			],
			[
				"layout_arc",
				"layout_arc-red"
			],
			[
				"ble",
				"bluegrey"
			],
			[
				"geox-",
				"geox-light"
			],
			[
				"Pap",
				"Papirus-Light"
			],
			[
				"Adapta",
				"Adapta-BlueGrey"
			],
			[
				"layou",
				"layout_adapta"
			],
			[
				"change",
				"change_folder"
			],
			[
				"la",
				"layout"
			],
			[
				"La",
				"Layout\tclass"
			],
			[
				"Adapta-Gre",
				"Adapta-Green-Nokto"
			],
			[
				"Adapta-D",
				"Adapta-DeepPurple-Nokto"
			],
			[
				"Adapta-de",
				"Adapta-DeepPurple"
			],
			[
				"blu",
				"bluegrey"
			],
			[
				"Adapta-B",
				"Adapta-BlueGrey"
			],
			[
				"icons",
				"iconslibreoffice"
			],
			[
				"wid",
				"windows_decor"
			],
			[
				"blue",
				"blue"
			],
			[
				"folde",
				"folder_color"
			],
			[
				"on_radio",
				"on_radio_theme_toggled"
			],
			[
				"ico",
				"icons_name"
			],
			[
				"f",
				"function"
			],
			[
				"confi",
				"configure"
			],
			[
				"geo",
				"geox-tweak"
			],
			[
				"App",
				"AppInstall"
			],
			[
				"gexo",
				"geox-tweak"
			],
			[
				"papi",
				"papirus-folders"
			],
			[
				"geox-t",
				"geox-tweak"
			],
			[
				"pa",
				"path_base"
			],
			[
				"ge",
				"geox-tweak"
			],
			[
				"ac",
				"activconf"
			],
			[
				"ho",
				"HOME"
			],
			[
				"pap",
				"papirus-folders"
			],
			[
				"ins",
				"install"
			],
			[
				"che",
				"check_call\tfunction"
			],
			[
				"apt",
				"apt-get"
			],
			[
				"au",
				"autostart"
			],
			[
				"conf",
				"config\tstatement"
			],
			[
				"Home",
				"HOME"
			],
			[
				"pro",
				"PRO-dark-XFCE-edition-II-1"
			],
			[
				"pla",
				"plank_theme\tstatement"
			],
			[
				"plank",
				"plank_theme\tstatement"
			],
			[
				"tru",
				"True\tkeyword"
			],
			[
				"pulse",
				"pulseaudio_config"
			],
			[
				"arg",
				"args2"
			],
			[
				"d",
				"plain_tasks_new_with_date"
			],
			[
				"T",
				"True"
			],
			[
				"Sh",
				"shell"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/python3\n\nfrom gi.repository import AppIndicator3 as appindicator\nfrom gi.repository import Gtk\nimport gi\nimport subprocess\nfrom geox_tweak_xfce_test import GeoxTweak \nimport configparser  # traiter les fichiers de configuration\nimport os\nfrom os.path import expanduser\n\n\ngi.require_version('Gtk', '3.0')\ngi.require_version('AppIndicator3', '0.1')\n\nhome = expanduser(\"~\")  # path home de l'user\nsdir = os.path.dirname(os.path.abspath(__file__))  # path du script py\npaneldir = home + '/.config/geox-tweak-xfce/panel/'\nconfig = configparser.ConfigParser()\ngtconf = home + '/.config/geox-tweak-xfce/geox-tweak.conf'\n\ngtweak = GeoxTweak()\n\nconfig.read(gtconf)\ndark_light = config.get('Style', 'dark_theme') \n\n\ndef main():\n    \"\"\"Creates a new instance of the status icon.\"\"\"\n\n\n    #AppIndicator\n    indicator = appindicator.Indicator.new(\n        'Geox-Tweak-Indicator', 'semi-starred-symbolic',\n        appindicator.IndicatorCategory.APPLICATION_STATUS\n        )\n    indicator.set_status(appindicator.IndicatorStatus.ACTIVE)\n    indicator.set_menu(menu())\n    dark_light()\n\n    Gtk.main()\n\n\ndef dark_light():\n    global dark_light \n    dark_light = config.get('Style', 'dark_theme') \n\n   \ndef menu():\n    menu = Gtk.Menu()\n\n\n\n    item_day_night = Gtk.CheckMenuItem.new_with_label('Day/Night : Automatic mode')\n    item_day_night.connect('activate', toggle_day_night_cb)  \n    menu.append(item_day_night)\n\n    item_dark_mode = Gtk.CheckMenuItem.new_with_label(\n        'Dark Theme')\n    item_dark_mode.connect(\n        'toggled', toggle_dark_mode_cb)\n    menu.append(item_dark_mode)\n\n    #FIXIT Dont work...\n    # if dark_light == 'yes':\n    #     item_dark_mode.handler_block_by_func(toggle_dark_mode_cb)\n    #     item_day_night.set_active(True)\n    #     item_dark_mode.handler_unblock_by_func(toggle_dark_mode_cb)\n    # else:\n    #     item_dark_mode.handler_block_by_func(toggle_dark_mode_cb)\n    #     item_day_night.set_active(False)\n    #     item_dark_mode.handler_unblock_by_func(toggle_dark_mode_cb)\n    \n\n    # Add quit action\n    quit_item = Gtk.MenuItem.new_with_label(\"Quit\")\n    quit_item.connect('activate', Gtk.main_quit)\n    menu.append(quit_item)\n\n\n\n\n    # Add Desktop Layout submenu\n    layout_menu_item = Gtk.MenuItem.new_with_label(\"Desktop Layout\")\n    layout_menu = Gtk.Menu()\n    for layout in ['Geox', 'Ubuntu']:\n        layout_item = Gtk.MenuItem.new_with_label(layout)\n        layout_item.connect('activate', layout_cb, layout)\n        layout_menu.append(layout_item)\n    layout_menu_item.set_submenu(layout_menu)\n    menu.append(layout_menu_item)\n\n    # Add Geox-tweak-xfce launcher item\n    geox_item = Gtk.MenuItem.new_with_label('GeoX Tweak Xfce')\n    geox_item.connect('activate', geox_cb)\n    menu.append(geox_item)\n\n    # Add Conky option submenu \n    conky_menu_item = Gtk.MenuItem.new_with_label(\n        \"Show on desktop (Conky)\")\n    conky_menu = Gtk.Menu()\n    for conky in ['Date & Time', 'Info', 'Date, time & info', \n                    'Keyboard Shortcut']:\n                    #TODO Make dictionnary for conky_cb function ?\n        conky_item = Gtk.MenuItem.new_with_label(conky)\n        conky_item.connect('activate', conky_cb, conky)\n        conky_menu.append(conky_item)\n    conky_menu_item.set_submenu(conky_menu)\n    menu.append(conky_menu_item)\n\n    menu.show_all()\n\n    return menu\n\n\n\ndef toggle_day_night_cb(widget, data=None):\n    \"\"\"Callback when a request to item day/night automatic mode was made \"\"\"\n    pass\n\ndef toggle_dark_mode_cb(widget, data=None):\n    \"\"\"Callback when a request to item dark mode was made \"\"\"\n    config.read(gtconf)\n\n    if widget.get_active():\n        if config.get('Style', 'dark_theme') == 'no' :\n            gtweak.dark_mode()\n            print(\"dark mode enabled\")\n        else:\n            print(\"allready dark_mode\")\n    else:\n        if config.get('Style', 'dark_theme') == 'yes' :\n            gtweak.light_mode()\n            print('light mode enabled')\n        else:\n            print(\"allready light_mode\")\n\n\ndef layout_cb(widget, layout):\n    \"\"\"Callback that handles activation of theme setting change\"\"\"\n    print(layout)\n    # geox = Geox()\n\n    if layout == 'Geox':\n        gtweak.plank_config(\n            pinned=\"true\",\n            offset=\"100\",\n            position=\"bottom\",\n            theme=gtweak.plank_theme  # theme doit etre precis√© sinon argument manquant \n        )\n        # gtweak.plank.set_active(True)\n        gtweak.pulseaudio_config(size=\"0.6\")\n        gtweak.dockbarx_config(\n            launcher=\"[]\", theme=\"Unite Faenza\", the_me=\"Unite_Faenza\")\n        gtweak.radio_layout_toggled(layout=\"geox\")\n        # gtweak.xfdashboard.set_active(True)\n\n    elif layout == ' Ubuntu':\n        gtweak.on_radio_ubuntu_toggled(widget)\n\n\ndef geox_cb (widget):\n    arg = \"geox-tweak\"\n    subprocess.Popen(arg, shell=True)\n\ndef conky_cb(widget, conky):\n    print(conky)\n\n\n###########\nif __name__ == \"__main__\":\n    main()\n",
			"file": "geox_tweak_indicator.py",
			"file_size": 7022,
			"file_write_time": 132222894196446274,
			"settings":
			{
				"buffer_size": 4931,
				"line_ending": "Unix"
			}
		},
		{
			"file": "gtx_gui.py",
			"settings":
			{
				"buffer_size": 45894,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python3\n\nimport configparser  # traiter les fichiers de configuration\nimport os\nimport os.path\nimport subprocess  # os et subprocess : executer des commandes et script bash\nfrom os.path import expanduser\n\nimport gi  # n√©cessaire pour utiliser le fichier glade\n# n√©cessaire pour utiliser le fichier glade/ GObject?\nfrom gi.repository import Gtk\n\ngi.require_version('Gtk', '3.0')\n\nhome = expanduser(\"~\")  # path home de l'user\nsdir = os.path.dirname(os.path.abspath(__file__))  # path du script py\npaneldir = home + '/.config/geox-tweak-xfce/panel/'\nconfig = configparser.ConfigParser()\ngtconf = home + '/.config/geox-tweak-xfce/geox-tweak.conf'\n\n\nclass GeoxTweak:\n\n    def __init__(self):\n\n        # TODO :  copier def\n        self.firstrun_warning()     # Verifie si FirstRun et d√©pendances\n        self.var_adapta = \"\"\n        self.var_arc = \"\"\n        # config.read(gtconf)     # Lire la configuration tel que loggu√©\n\n        self.conf_actual()\n\n\n    # @ FirstRun, dependance et logiciel tiers\n    # FIXIT\n\n    def firstrun_warning(self):\n        \"\"\" Verifie si c'est le premier lancement de geox-tweak-xfce\n        Si oui, lance  le script firstrun.\n        Et verifie l'installation des logiciels tiers (synapse, xfdashboard, plank, dockbarx)\n        et des d√©pendances (python..., gconftool, etc. #What ? : 2? script diff√©rent ?\"\"\"\n\n        # TODO : verif logiciel par logiciel ; griser les layout impossible et proposer installation\n        # if config.get('AppInstall', 'synapse') != \"ok\"\n        #     arg3 =\"bash \" \"\n\n        # Verifier le fichier de configuration\n        args = '''if [ ! -e $HOME/.config/geox-tweak-xfce/geox-tweak.conf ]\n        then mkdir $HOME/.config/geox-tweak-xfce/ ;\n        cp -f /usr/share/geox-tweak/geox-tweak.conf $HOME/.config/geox-tweak-xfce/geox-tweak.conf ;\n        fi '''\n        subprocess.check_call(args, shell=True)\n        config.read(gtconf)     # Lire la configuration tel que loggu√©\n        if config.get('AppInstall', 'FirstRun') != \"no\":\n\n            dialog = Gtk.MessageDialog(None, 0, Gtk.MessageType.WARNING,\n                                       Gtk.ButtonsType.OK_CANCEL, \"Some packages are required by geox-tweak-xfce, procced to installation ?\")\n            response = dialog.run()\n            if response == Gtk.ResponseType.OK:\n                self.firstrun()\n\n            dialog.destroy()\n\n            # dialog.connect(\"destroy\", Gtk.main_quit)\n            # dialog.show_all()\n\n    def firstrun(self):\n\n        script = sdir + '/script/firstrun.sh'\n        subprocess.call(\"xfce4-terminal -e \" + script, shell=True)\n\n    # Fail : embeded xterm properly\n        # wnd_install = Gtk.Window()\n        # wnd_install.add(wnd_w)\n\n        # wnd_install.set_default_size(600,800)\n        # wnd_install.connect(\"destroy\", Gtk.main_quit)\n        # wnd_install.show_all()\n\n        # print (wnd_install.get_property('window').get_xid())\n        # wnd_id = wnd_install.get_property('window').get_xid()\n\n        # subprocess.Popen('xterm -into {0} -hold -e {1}'.format(wnd_id, script), shell=True)\n\n    def conf_actual(self):\n\n        #TODO no more need config.get for theme windows_decor and icons ?\n        self.theme = subprocess.getoutput(\"xfconf-query -c xsettings -p /Net/ThemeName\")\n        self.windows_decor = subprocess.getoutput(\"xfconf-query -c xfwm4 -p /general/theme\")\n        self.icons = subprocess.getoutput(\"xfconf-query -c xsettings -p /Net/IconThemeName\")\n        self.libreoffice_icons = config.get('Style', 'libreoffice_icons')\n\n        self.folder = config.get('Style', 'folder')  \n        self.plank_theme = config.get('Style', 'plank_theme')\n\n\n        config.set('Style', 'theme', self.theme)\n        config.set('Style', 'windows_decor', self.windows_decor)\n        config.set('Style', 'icons', self.icons)\n        \n        #What ? possiblit√© de regrouper if or ?! \n        if '-dark' in self.theme: # :  \n            config.set('Style', 'dark_theme', 'yes')\n       \n        elif'Nokto' in self.theme: # : \n            config.set('Style', 'dark_theme', 'yes')\n\n        elif'-Dark' in self.theme: # : \n            config.set('Style', 'dark_theme', 'yes')\n\n        else:\n            config.set('Style', 'dark_theme', 'no')\n\n\n\n        config.write(open(gtconf, 'w'))\n\n#@ GTK/icon/libreofficeicons/plank Theme_________________\n\n    def change_theme(self, change_folder=True):\n\n        print('new icons theme : ' + self.icons)\n    # if self.icons != config.get('Style', 'icons'):  #Fixit\n        subprocess.Popen(\n            '''xfconf-query -c xsettings -p /Net/IconThemeName -s ''' +\n            self.icons + \"\",\n            shell=True)\n        print(\"new icon theme : \" + self.icons)\n       \n        subprocess.Popen(\n            '''xfconf-query -c xfwm4 -p /general/theme -s ''' +\n            self.windows_decor + \"&\",\n            shell=True)  # Decoration pour le compositeur xfwm4 (et compton?)\n        print(\"new windows decorator theme : \" + self.windows_decor)\n\n        # Pour theme adapta : theme compact ou pas TODO: theme Materia !\n        if \"Adapta\" in self.theme:\n            theme = self.theme + self.var_adapta\n        # Pour theme arc : theme hdpi\n        elif \"Arc\" in self.theme:\n            theme = self.theme + self.var_arc\n        else:\n            theme = self.theme\n\n\n        subprocess.Popen(\n            '''xfconf-query -c xsettings -p /Net/ThemeName -s ''' +\n            theme + \" &\",\n            shell=True)\n        print(\"new theme : \" + theme)\n\n        # TODO comparer a .conf et ajouter donn√© a celuici\n        subprocess.Popen(\n            '''sed -i s'#\"SymbolStyle\" oor:op=\"fuse\"><value>.*</value></prop></item>#\"SymbolStyle\" oor:op=\"fuse\"><value>'''\n            + self.libreoffice_icons +\n            '''</value></prop></item>'# $HOME/.config/libreoffice/4/user/registrymodifications.xcu ;\n            sed -i s'#papirus</item>#''' + self.libreoffice_icons +\n            '''</value></prop></item>'# $HOME/.config/libreoffice/4/user/registrymodifications.xcu ''',\n            shell=True)\n        print(\"libreoffice icon style : \" + self.libreoffice_icons)\n\n\n        if change_folder:\n            if config.get('Style', 'folder') != self.folder:\n                self.change_folder_color()\n\n        if config.get('Style', 'plank_theme') != self.plank_theme:\n            subprocess.check_call(\n                \"gsettings set net.launchpad.plank.dock.settings:/net/launchpad/plank/docks/dock1/ theme \"\n                + self.plank_theme + \" ;\",\n                shell=True)\n\n            config.set('Style', 'plank_theme', self.plank_theme)\n            print('new plank theme : ' + self.plank_theme)\n\n        # inscription dans le fichier geox-tweak.conf des options selectionnees\n        # config. fonction pour les fichiers structur√©s comme les fichier .ini\n        config.set('Style', 'theme', self.theme)\n        config.set('Style', 'windows_decor', self.windows_decor)\n        config.set('Style', 'icons', self.icons)\n        # config.set('Style', 'folder', self.folder) # no needed, in change_folder_color()\n        \n\n        if '-dark' in self.theme: # :\n            config.set('Style', 'dark_theme', 'yes')\n       \n        elif'Nokto' in self.theme: # : \n            config.set('Style', 'dark_theme', 'yes')\n\n        elif'-Dark' in self.theme: # :\n            config.set('Style', 'dark_theme', 'yes')\n\n        else:\n            config.set('Style', 'dark_theme', 'no')\n\n        config.write(open(gtconf, 'w'))\n\n    def theme_var(self, var_arc=\"\", var_adapta=\"\"):\n        self.var_arc = var_arc\n        self.var_adapta = var_adapta\n\n    def select_theme(self, theme='', windows_decor='', \n        icons_name='Papirus', libreoffice_icons='papirus',\n                     folder_color='blue', plank_theme='geox-dark'):\n        self.theme = theme\n        self.windows_decor = windows_decor\n        self.icons = icons_name\n        \n        if self.libreoffice_icons != config.get('Style', 'libreoffice_icons'):\n            self.libreoffice_icons = libreoffice_icons\n        \n        if self.folder != config.get('Style', 'folder'):\n            self.folder = folder_color\n    \n        if self.plank_theme != config.get('Style', 'plank_theme'):\n            self.plank_theme = plank_theme\n\n    # Folder ICON COLOR ___________________\n    def on_folderc(self, folderc):\n        self.folder = folderc\n        self.change_folder_color()\n\n    def change_folder_color(self):\n        ''' change folder icon color for papirus icons theme '''\n\n        cfolder = self.folder\n        # import pdb; pdb.set_trace()\n        script = '''#!/bin/bash\nTheme=$(xfconf-query -c xsettings -p /Net/IconThemeName)\n#xfce4-terminal -e \"\"\nsudo papirus-folders -t $Theme -C ''' + cfolder + ''' \n '''\n        # subprocess.Popen([sdir + \"/script/folder-color.sh\", cfolder], shell=False)\n        subprocess.Popen(script, shell=True)\n\n        config.set('Style', 'folder', cfolder)\n        config.write(open(gtconf, 'w'))\n        print(\"new folder color : \" + cfolder)\n\n    def dark_mode(self): \n        # self.dark_theme = config.get('Style', 'dark_theme')\n        # dictionnaire des themes sombres\n        self.theme = subprocess.getoutput(\"xfconf-query -c xsettings -p /Net/ThemeName\")\n\n        if 'Adapta' in self.theme:\n            darktheme = self.theme + '-Nokto'  \n            print(darktheme)\n            self.select_theme(\n                theme=darktheme, \n                windows_decor=darktheme,\n                icons_name=\"Papirus-Dark\",\n                libreoffice_icons=\"papirus-dark\",\n                )\n            self.change_theme()\n\n        elif 'Materia' or 'Qogir' or 'Adwaita'  in self.theme:\n            darktheme = self.theme + '-dark'  \n            darktheme = darktheme.replace('-light', '')\n            print(darktheme)\n            self.select_theme(\n                theme=darktheme, \n                windows_decor=darktheme,\n                icons_name=\"Papirus-Dark\",\n                libreoffice_icons=\"papirus-dark\",\n                )\n            self.change_theme()\n\n        elif 'Arc' in self.theme:\n            darktheme = self.theme + '-Dark'  \n            print(darktheme)\n            self.select_theme(\n                theme=darktheme, \n                windows_decor=darktheme,\n                icons_name=\"Papirus-Dark\",\n                libreoffice_icons=\"papirus-dark\",\n                )\n            self.change_theme()\n\n        \n        elif 'McOS'  in self.theme:\n            self.select_theme(\n                theme='McOS-MJV-Dark-XFCE-Edition-2.3', \n                windows_decor='McOS-MJV-Dark-XFCE-Edition-2.3',\n                icons_name=\"Papirus-Dark\",\n                libreoffice_icons=\"papirus-dark\",\n                )\n            self.change_theme()\n\n    def light_mode(self): \n        # self.dark_theme = config.get('Style', 'dark_theme')\n        # dictionnaire des themes sombres\n        self.theme = subprocess.getoutput(\"xfconf-query -c xsettings -p /Net/ThemeName\")\n\n        if 'Adapta' in self.theme:\n            lighttheme = self.theme\n            lighttheme = lighttheme.replace('-Nokto', '')\n            print(lighttheme)\n            self.select_theme(\n                theme=lighttheme, \n                windows_decor=lighttheme,\n                icons_name=\"Papirus\",\n                libreoffice_icons=\"papirus\",\n                )\n            self.change_theme()\n\n        elif 'Materia' or 'Qogir' or 'Adwaita' in self.theme:\n            lighttheme = self.theme\n            lighttheme = lighttheme.replace('-dark', '')              \n            print(lighttheme)\n            self.select_theme(\n                theme=lighttheme, \n                windows_decor=lighttheme,\n                icons_name=\"Papirus\",\n                libreoffice_icons=\"papirus\",\n                )\n            self.change_theme()\n\n        elif 'Arc'  in self.theme:\n            lighttheme = self.theme\n            lighttheme = lighttheme.replace('-Dark', '')\n            print(lighttheme)\n            self.select_theme(\n                theme=lighttheme, \n                windows_decor=lighttheme,\n                icons_name=\"Papirus\",\n                libreoffice_icons=\"papirus\",\n                )\n            self.change_theme()\n\n        \n        elif 'McOS'  in self.theme:\n            self.select_theme(\n                theme='McOS-MJV-XFCE-Edition-2.3', \n                windows_decor='McOS-MJV-XFCE-Edition-2.3',\n                icons_name=\"Papirus\",\n                libreoffice_icons=\"papirus\",\n                )\n            self.change_theme()\n\n        \n\n\n# class Commands():\n#    def cmd_foo(self):\n#        print(\"Foo\")\n\n#    def callFunction(self, name):\n#        fn = getattr(self, 'cmd_'+name, None)\n#        if fn is not None:\n#             fn()\n\n#         method_to_call = getattr(foo, 'bar')\n#         result = method_to_call()\n\n    \n\n\n# @ Desktop Layout ___________\n\n    def change_layout(layout):\n        \"\"\" Change xfce panel orientations and plugins \"\"\"\n        args = '''xfce4-panel --quit; pkill xfconfd; rm -Rf ~/.config/xfce4/panel; \\\n         cp -Rf ''' + paneldir + layout + '''/xfce4/panel ~/.config/xfce4/panel; \\\n                    cp -f ''' + paneldir + layout + '''/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml \\\n                    ~/.config/xfce4/xfconf/xfce-perchannel-xml; \\\n                    sleep 2; xfce4-panel &'''\n\n        subprocess.check_call(args, shell=True)\n        config.set('Style', 'layout', layout)\n        config.write(open(gtconf, 'w'))\n\n    def plank_config(self, pinned, offset, position, theme):\n        args = \"gsettings set net.launchpad.plank.dock.settings:/net/launchpad/plank/docks/dock1/ pinned-only \" + pinned + \" ; \\\n                gsettings set net.launchpad.plank.dock.settings:/net/launchpad/plank/docks/dock1/ offset \" + offset + \" ; \\\n                gsettings set net.launchpad.plank.dock.settings:/net/launchpad/plank/docks/dock1/ position \" + position + \" ; \\\n                gsettings set net.launchpad.plank.dock.settings:/net/launchpad/plank/docks/dock1/ theme \" + theme + \" ;\"\n        subprocess.Popen(args, shell=True)\n        config.set('Style', 'plank_theme', theme)\n        config.write(open(gtconf, 'w'))\n\n   # path des fichiers de conf !!\n    # TODO > config dockbarx : /home/geo/.gconf/apps/dockbarx/%gconf.xml\n\n    def dockbarx_config(self, launcher, theme, the_me):\n        args0 = \"pkill -f dockbarx-plug \"\n        args1 = '''gconftool-2 --type list --list-type string --set /apps/dockbarx/launchers \"''' + \\\n            launcher + '''\" '''\n        args2 = '''gconftool-2 --type string --set /apps/dockbarx/theme \"''' + theme + '''\" '''\n        args3 = ''' gconftool-2 --type string --set /apps/dockbarx/themes/''' + \\\n            the_me + '''/popup_style_file Magic_trans.tar.gz '''\n        subprocess.Popen(args0, shell=True)\n        subprocess.check_call(args1, shell=True)\n        subprocess.check_call(args2, shell=True)\n        subprocess.check_call(args3, shell=True)\n\n    # TODO > if css exist but not line !!\n    def pulseaudio_config(self, size):\n        \"\"\" Workaround : Change gtk.css for not have BIG pulseaudio \n        (and other) icon plugins on large panel \"\"\"\n        gtkcss = os.path.expanduser('~/.config/gtk-3.0/gtk.css')\n        args1 = \"sed -i s'/{-gtk-icon-transform: scale(.*);}/{-gtk-icon-transform: scale(\" + \\\n            size + \");}'/ $HOME/.config/gtk-3.0/gtk.css\"\n        gtktransform = '''\n #pulseaudio-button * {-gtk-icon-transform: scale(''' + size + ''');} \n #xfce4-notification-plugin * {-gtk-icon-transform: scale(''' + size + ''');} \n #xfce4-power-manager-plugin * {-gtk-icon-transform: scale(''' + size + ''');}'''\n\n        if not os.path.isfile(gtkcss):\n            file = open(gtkcss, 'w')\n            file.write(gtktransform)\n        else:\n            with open(gtkcss) as f:\n                if '#pulseaudio-button * {-gtk-icon-transform: scale(' in f.read():\n                    subprocess.check_call(args1, shell=True)\n                else:\n                    f.write(gtktransform)\n\n    def app_activ(self, widget, xf, xd, ck, nt):\n        \"\"\" s'execture quand les logiciels tiers sont activ√©s, avec les arguments d√©finis\n        dans on_app_toggled, permettant de s'adapter aux specificit√©\n        d'exectution/extinction des app \"\"\"\n\n        app = Gtk.Buildable.get_name(widget)\n        # TODO > os.subs ?os.\n        args = nt + app + ck + xd + \"&\"\n        subprocess.check_call(args, shell=True)\n\n        os.system('''\n            find $HOME/.config/autostart -iname '*''' + app + '''*' -exec sed -i 's/Hidden=true.*/\\Hidden=false/' {} \\;'''\n                  )\n        os.system('''\n            find $HOME/.config/autostart -iname '*''' + app + '''*' -exec sed -i 's/X-GNOME-Autostart-enabled=false.*/\\X-GNOME-Autostart-enabled=true/' {} \\;'''\n                  )\n        widget.set_label(\"on\")\n\n    def app_inactiv(self, widget, xf, xq, pkill, nt):\n        \"\"\" s'execture quand les logiciels tiers sont activ√©s;\n        modifie les fichier .desktop du dossier autostart \"\"\"\n\n        app = Gtk.Buildable.get_name(widget)\n        args = pkill + nt + app + xq + \"&\"\n        subprocess.check_call(args, shell=True)\n\n        os.system('''\n            find $HOME/.config/autostart -iname '*''' + app + '''*' -exec sed -i 's/Hidden=false.*/\\Hidden=true/' {} \\;'''\n                  )\n        os.system('''\n            find $HOME/.config/autostart -iname '*''' + app + '''*' -exec sed -i 's/X-GNOME-Autostart-enabled=true.*/\\X-GNOME-Autostart-enabled=false/' {} \\;'''\n                  )\n        widget.set_label(\"off\")\n\n\n########################\n",
			"file": "geox_tweak_xfce_test.py",
			"file_size": 17519,
			"file_write_time": 132222886036263396,
			"settings":
			{
				"buffer_size": 17494,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/lib/python3/dist-packages/redshift_gtk/statusicon.py",
			"settings":
			{
				"buffer_size": 13941,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/geo/Developpement/TEST/systrayApp-2",
			"settings":
			{
				"buffer_size": 1763,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/lib/python3/dist-packages/redshift_gtk/utils.py",
			"settings":
			{
				"buffer_size": 3245,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wrap",
				"BracketHighlighter: Wrap Selections with Brackets"
			],
			[
				"fold",
				"Fold Python : fold depth 1"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"war",
				"Wrap Plus: Wrap Lines"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"ne",
				"Anaconda: Next lint error"
			],
			[
				"goto",
				"Anaconda: Goto object definition"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"enap",
				"Package Control: Enable Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"ana doc",
				"Anaconda: Display object docs"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"highli",
				"HighlightWords: Toggle Settings"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"auto",
				"AutoPEP8: Format Code"
			],
			[
				"view",
				"View: Toggle Side Bar"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"inden",
				"Indentation: Reindent Lines"
			],
			[
				"ana",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"py",
				"PyYapf: Format Document"
			],
			[
				"histo",
				"Local History: Compare & Replace"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"comm",
				"Toggle Comment"
			],
			[
				"exp",
				"ExpandRegion"
			],
			[
				"y",
				"PyYapf: Format Document"
			],
			[
				"toggle lin",
				"SublimeLinter: Toggle Highlights"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"book",
				"Bookmarks: Toggle"
			],
			[
				"next",
				"Bookmarks: Select Next"
			],
			[
				"sid",
				"View: Toggle Side Bar"
			],
			[
				"align",
				"Preferences: Alignment Key Bindings ‚Äì Default"
			],
			[
				"lint",
				"SublimeLinter: Show All Errors"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"deb",
				"Debugger: Refresh phantoms"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"doc",
				"Anaconda: Display object docs"
			],
			[
				"find",
				"Anaconda: Find object usage"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"error",
				"SublimeLinter: Show All Errors"
			],
			[
				"local",
				"Local History: Save Now"
			],
			[
				"debu",
				"Debugger: Start"
			],
			[
				"repla",
				"Local History: Compare & Replace"
			],
			[
				"loca",
				"Local History: Compare & Replace"
			],
			[
				"build",
				"Build With: Anaconda Python Builder"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"todo",
				"Set Syntax: Git Rebase Todo"
			],
			[
				"ya",
				"PyYapf: Format Selection"
			],
			[
				"contr ",
				"Package Control: Install Package"
			],
			[
				"contr ins",
				"Package Control: Install Package"
			],
			[
				"boun",
				"List bound keys"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"sublime",
				"Sublime Merge: File History"
			],
			[
				"task",
				"Tasks: Complete"
			],
			[
				"pack pin",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"his",
				"Sublime Merge: File History"
			],
			[
				"enter",
				"Anaconda: Next lint error"
			],
			[
				"",
				"Build With: Anaconda Python Builder"
			],
			[
				"Package Control:",
				"Package Control: Install Package"
			],
			[
				"pep",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"Pythn",
				"Build With: Anaconda Python Builder"
			],
			[
				"console",
				"Set Syntax: R Console"
			],
			[
				"ke",
				"Preferences: Key Bindings"
			],
			[
				"vie",
				"View: Toggle Side Bar"
			],
			[
				"anaconda pe",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"ana ru",
				"Anaconda: Run Current File Tests"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 194.0,
		"history":
		[
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 51017))",
			"import socket; socket.socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect(\"/home/geo/.local/share/anaconda/run/geox-tweak/anaconda.sock\")",
			"import socket; socket.socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect(~/.local/share/anaconda/run/geox-tweak/anaconda.sock)",
			"import socket; socket.socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect(/home/geo/.local/share/anaconda/run/geox-tweak/anaconda.sock)",
			"import socket;socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect(/home/geo/.local/share/anaconda/run/geox-tweak/anaconda.sock)",
			"import socket; socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect(/home/geo/.local/share/anaconda/run/geox-tweak/anaconda.sock)",
			"import socket; socket.socket(socket.AF_INET,socker.SOCK_STREAM).connect(/home/geo/.local/share/anaconda/run/geox-tweak/anaconda.sock)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak"
	],
	"file_history":
	[
		"/home/geo/Developpement/TEST/systrayApp.py",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox-tweak.conf",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox_tweak_xfce_test.py",
		"/usr/lib/python3/dist-packages/redshift_gtk/statusicon.py",
		"/home/geo/Developpement/TEST/systrayApp-2",
		"/home/geo/.config/sublime-text-3/Packages/User/ExpandRegion.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/ExpandRegion/ExpandRegion.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/geo/.config/sublime-text-3/Packages/Fold Python/Default (Linux).sublime-keymap",
		"/home/geo/.config/sublime-text-3/Packages/Fold Python/FoldPython.sublime-settings",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/install",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/folder-color.sh",
		"/home/geo/.config/sublime-text-3/.sublime/Local History/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox_tweak_xfce_test-20191230000109.py",
		"/usr/lib/python3.7/subprocess.py",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox-tweak",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/firstrun.sh",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/geox-tweak",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/firstrun.sh.old",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/nogui-geox-tweak-appdep.sh",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/geoxtweak-appdep.sh",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox_tweak_xfce.py",
		"/home/geo/.config/sublime-text-3/Packages/Anaconda/Default (Linux).sublime-keymap",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox-tweak-common.py",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox-tweak-xfce_0.2",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox-tweak-indicator.py",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/__init.py__",
		"/home/geo/.config/sublime-text-3/Packages/Local History/settings/LocalHistory.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/User/LocalHistory.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
		"/home/geo/Developpement/geox-tweak-plugin/geox-tweak-indicator.py",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/McOS-MJV-XFCE-Edition-2.3/xfwm4/close-prelight.xpm",
		"/home/geo/.config/sublime-text-3/Packages/User/HighlightWords.sublime-settings",
		"/usr/lib/python3.7/os.py",
		"/home/geo/.config/sublime-text-3/Packages/HighlightWords/HighlightWords.sublime-settings",
		"/usr/lib/python3/dist-packages/gi/overrides/Gtk.py",
		"/home/geo/.config/sublime-text-3/Packages/User/ColorHighlighter.sublime-settings",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak/DEBIAN/postinst",
		"/home/geo/Documents/BIBLIOTEK/pageA6.py",
		"/home/geo/.conky/Geox/time-date-info-white",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src-to-deb.sh",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/geox-tweak.sublime-project",
		"/media/geo/Mediatek/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/install",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak-ubuntu18/DEBIAN/control",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak-ubuntu18/DEBIAN/postinst",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak-mx18/DEBIAN/postinst",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/activ.conf",
		"/media/geo/Mediatek/Developpement/geox-tweak-xfce/geox-tweak-xfce/setup.py",
		"/home/geo/.cache/.fr-lE52pE/usr/lib/python2.7/dist-packages/libmat/__init__.py",
		"/home/geo/.cache/.fr-sou9Lw/prerm",
		"/home/geo/.cache/.fr-rgRJbJ/postinst",
		"/home/geo/.cache/.fr-4cOzg2/postinst",
		"/home/geo/.cache/.fr-ghhwMZ/usr/bin/cryptkeeper",
		"/home/geo/.cache/.fr-nCCVu5/postinst",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/doc/papirus-icon-theme/copyright",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak-mx18/DEBIAN/control",
		"/home/geo/.config/sublime-text-3/Packages/HighlightWords/Default (Linux).sublime-keymap",
		"/home/geo/.config/sublime-text-3/Packages/WordHighlight/Word Highlight.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/WordHighlight/Default (Linux).sublime-keymap",
		"/home/geo/.config/sublime-text-3/Packages/WordHighlight/Default (Linux).sublime-mousemap",
		"/home/geo/.config/sublime-text-3/Packages/GotoDocumentation/Default (Linux).sublime-keymap",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/script/papirus-folders-master/papirus-folders",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak/usr/share/geox-tweak/geox-tweak",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak/DEBIAN/control",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/deb/geox-tweak/usr/share/geox-tweak/script/geoxtweak-appdep.sh",
		"/home/geo/Developpement/geox/app-installer-4mx/app-installer-4mx-zenity.sh",
		"/home/geo/Developpement/geox/app-installer-4mx/app-installer-4mx (copie 1).sh",
		"/home/geo/Developpement/geox/app-installer-4mx/prerequis-app-installer.sh",
		"/home/geo/Developpement/geox/geox-appdep.sh",
		"/home/geo/.config/sublime-text-3/Packages/Alignment/Base File.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/Alignment/Default (Linux).sublime-keymap",
		"/home/geo/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/AutoPEP8/AutoPep8.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/User/Python.sublime-settings",
		"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src/geox-tweak/geox.glade",
		"/home/geo/.themes/oomox-arc-dark/gtk-3.0/gtk.css",
		"/home/geo/Autre/theme/2_a modif/Arc-Green-Dark/gtk-3.0/gtk.css",
		"/home/geo/Autre/theme/1_script/Arc-Theme-Colora-master/installation2.sh",
		"/home/geo/Developpement/geox-tweak/geox-tweak.sublime-project",
		"/home/geo/Developpement/geox-tweak/deb/geox-tweak/DEBIAN/preinst",
		"/home/geo/.themes/Arc-Evopop/gtk-3.0/gtk.css",
		"/home/geo/Autre/theme/Arc-Cherry/gtk-3.0/gtk.css",
		"/home/geo/Developpement/geox-tweak/src/README.md",
		"/home/geo/Developpement/geox-tweak/dev/geox-tweak/geox-tweak",
		"/home/geo/.config/sublime-text-3/Packages/Insert-Filepath/InsertFilepath.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/home/geo/Developpement/geox-tweak/dev/setup.py",
		"/home/geo/Developpement/geox-tweak/dev/GeoX-Tweak.desktop",
		"/home/geo/Developpement/geox-tweak/dist/deb/geox-tweak/usr/share/geox-tweak/theme/dockbarx/dockbarx/%gconf.xml",
		"/home/geo/.config/gtk-3.0/gtk.css",
		"/home/geo/.config/sublime-text-3/Packages/PyYapf Python Formatter/README.md",
		"/home/geo/.gconf/apps/dockbarx/%gconf.xml",
		"/home/geo/.config/sublime-text-3/Packages/Git/Git.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/Sublimerge 3/Default (Linux).sublime-mousemap",
		"/home/geo/.config/sublime-text-3/Packages/Sublimerge 3/Sublimerge Macros.sublime-settings",
		"/home/geo/.config/sublime-text-3/Packages/PlainTasks/Default (Linux).sublime-keymap",
		"/home/geo/.config/sublime-text-3/.sublime/Local History/home/geo/Developpement/geox-tweak/dev/geox-tweak/geox-tweak-20190728002417",
		"/home/geo/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
		"/home/geo/.config/libreoffice/4/user/registrymodifications.xcu",
		"/home/geo/.config/libreoffice/4/user/uno_packages/cache/registry/com.sun.star.comp.deployment.component.PackageRegistryBackend/backenddb.xml",
		"/home/geo/.config/libreoffice/4/user/uno_packages/cache/registry/com.sun.star.comp.deployment.help.PackageRegistryBackend/backenddb.xml",
		"/home/geo/.config/libreoffice/4/user/uno_packages/cache/registry/com.sun.star.comp.deployment.bundle.PackageRegistryBackend/backenddb.xml",
		"/home/geo/.config/libreoffice/4/user/config/javasettings_Linux_X86_64.xml",
		"/home/geo/.gconf/apps/dockbarx/applets/%gconf.xml",
		"/home/geo/.gconf/apps/dockbarx/dock/%gconf.xml",
		"/home/geo/Developpement/geox-tweak/dev/geox-tweak/geox-tweak.sublime-project"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce/src",
			"/home/geo/Developpement/geox-tweak-xfce/geox-tweak-xfce",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"geox.",
			"geox",
			"menu_lc",
			"menu_rc",
			"\n        if ('-dark' or '-Dark' or 'Nokto') in self.theme: # :   #FIXIT ?\n            config.set('Style', 'dark_theme', 'yes')\n        else:\n            config.set('Style', 'dark_theme', 'no')\n",
			"iconslibreoffice",
			"change_folder_color",
			" config.",
			" config.write",
			"config",
			"config.get",
			"xfconf",
			"qogir-da",
			"gtconf",
			"Qogir",
			"lightheme",
			"status_icon",
			"self",
			"self.",
			"toggle_dark_mode_cb",
			"toggled",
			"toggle",
			"darktheme",
			"dark",
			"self",
			"theme='",
			"theme",
			"Arc",
			"theme='",
			"theme=",
			"self.theme_name.set_label",
			"theme='', windows_decor=''",
			"\n                theme='Adapta-Nokto', \n                windows_decor='Adapta',\n                icons_name       ='Papirus-Dark',\n                iconslibreoffice ='papirus-dark',\n                folder_color     ='cyan'\n                \n                ",
			"theme",
			"config",
			"ascii_lowercase",
			"select_theme",
			"gtconf",
			"        # TODO > os.subs ?\n",
			"'''",
			"os.system",
			"check_call",
			"'''",
			"call",
			"change_col",
			"change_folder",
			"new folder",
			"papirus_dark",
			"print(\"new folder",
			"print(\"new",
			"cherry",
			"self.app_",
			"app_activ",
			"self.app_activ",
			"self.app_",
			"app_act",
			"foder",
			"folder_c",
			"self",
			"folderc",
			"echo",
			"terminal",
			"folder_c",
			"folder_color",
			"self",
			"change_f",
			"chk",
			"folder",
			"Folder",
			"self.folder",
			"folder_colo",
			"folder_color",
			"var_arc",
			"var_adapta",
			"var",
			"gtweak",
			"var",
			"adapta",
			"label",
			"Label",
			"label",
			"wnd",
			"run",
			"firtrun",
			"firstrun",
			"gtconf",
			" if gtconf",
			"sed",
			"state",
			"layout",
			"autostart",
			"if ",
			"eta",
			"theme_clearlooks",
			"clea",
			"sxcdp",
			"theme",
			" -v",
			"sudosudo",
			"echo $pw | ",
			"echo $pw | sudo -S",
			"plank",
			"synapse",
			"shell=Fasle",
			"gtconf",
			"config.",
			"config",
			" gtweak.radio_layout_toggled",
			"self",
			"layout",
			"layout_adapta",
			"layout",
			"radio_layout_toggled",
			"layout",
			"Dark",
			"Qogir",
			"plank_theme",
			"ic",
			"            self.folder = \"red\"\n",
			"Papirus-Dark",
			"papirus-dark",
			"Papirus-Dark",
			"papirus-dark",
			"Papirus-Dark",
			"papirus-dark",
			"Papirus-Dark",
			"papirus-dark",
			"Papirus-Dark"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"libreoffice_icons",
			"sudo",
			"echo $pw | sudo -S",
			"\"geox-dark\"",
			"geox-dark",
			"subprocess.Popen",
			"geox-dark",
			"subprocess",
			"subprocces.check_call",
			"set_text"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "geox_tweak_indicator.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4931,
						"regions":
						{
						},
						"selection":
						[
							[
								4383,
								4383
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"expand_region_settings": "{\"hash\": \"88e3b7bec220eb4da3f40d59a0150f29\", \"stack\": [{\"end\": 5048, \"start\": 5011}, {\"end\": 5063, \"start\": 5011}]}",
							"highlight_size": 0,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 6.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "gtx_gui.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45894,
						"regions":
						{
						},
						"selection":
						[
							[
								32744,
								32744
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										32743,
										32744
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										32562,
										32563
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										32743,
										32744
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										32562,
										32563
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"expand_region_settings": "{\"hash\": \"282b6c151df3ffdb4ff61a66b837fba5\", \"stack\": [{\"end\": 40423, \"start\": 40419}, {\"end\": 40435, \"start\": 40405}]}",
							"highlight_size": 0,
							"open_with_edit": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 5082.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "geox_tweak_xfce_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17494,
						"regions":
						{
						},
						"selection":
						[
							[
								7176,
								7176
							],
							[
								7269,
								7269
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"expand_region_settings": "{\"hash\": \"847992085e75d0b16f4c1a5a98cd6105\", \"stack\": [{\"end\": 6838, \"start\": 6833}, {\"end\": 6883, \"start\": 6825}]}",
							"highlight_size": 1,
							"highlight_text": "folder_color",
							"rulers":
							[
								70
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false,
							"wrap_width": 70
						},
						"translation.x": 0.0,
						"translation.y": 2488.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/usr/lib/python3/dist-packages/redshift_gtk/statusicon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13941,
						"regions":
						{
						},
						"selection":
						[
							[
								12697,
								12697
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"highlight_size": 2,
							"highlight_text": "connect toggled",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5562.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/geo/Developpement/TEST/systrayApp-2",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1763,
						"regions":
						{
						},
						"selection":
						[
							[
								929,
								929
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 124,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 3.0,
						"translation.y": 415.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/usr/lib/python3/dist-packages/redshift_gtk/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3245,
						"regions":
						{
						},
						"selection":
						[
							[
								2303,
								2303
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1079.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 232.0
	},
	"output.SublimeLinter":
	{
		"height": 288.0
	},
	"output.anaconda_documentation":
	{
		"height": 181.0
	},
	"output.autopep8":
	{
		"height": 132.0
	},
	"output.exec":
	{
		"height": 166.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 127.0
	},
	"output.help":
	{
		"height": 126.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 132.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "geox_test.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				".con",
				"geox-tweak/geox-tweak.conf"
			],
			[
				"colorp",
				"geox-tweak/McOS-MJV-XFCE-Edition-2.3/xfwm4/close-prelight.xpm"
			],
			[
				"sdit",
				"src/geox-tweak/doc/papirus-icon-theme/copyright"
			],
			[
				"",
				"geox-tweak/geox-tweak"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"app_control"
			],
			[
				"app",
				"app_control"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		]
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 231.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
